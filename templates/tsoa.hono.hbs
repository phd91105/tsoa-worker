// WARNING: This file was auto-generated with tsoa for jsdom. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
{{#if canImportByAlias}}
import {
  Controller,
  ValidationService,
  FieldErrors,
  ValidateError,
  TsoaRoute,
  fetchMiddlewares,
  IocContainer,
  IocContainerFactory,
} from '@tsoa/runtime';
{{else}}
  import { Controller, ValidationService, FieldErrors, ValidateError, TsoaRoute, TsoaResponse, HttpStatusCodeLiteral } from '../../../src';
{{/if}}
{{#each controllers}}
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
import { {{name}} } from '{{modulePath}}';
{{/each}}
{{#if authenticationModule}}
import { authenticationHandler } from '{{authenticationModule}}';
{{/if}}
{{#if iocModule}}
import { iocContainer } from '{{iocModule}}';
{{/if}}
import { Hono, Context, Next } from 'hono';
// swagger
import swaggerUI from '../templates/swagger';
import swaggerSpec from '../swagger.json';

// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

const models: TsoaRoute.Models = {
    {{#each models}}
    '{{@key}}': {
        {{#if enums}}
        dataType: 'refEnum',
        enums: {{{json enums}}},
        {{/if}}
        {{#if properties}}
        dataType: 'refObject',
        properties: {
            {{#each properties}}
            '{{@key}}': {{{json this}}},
            {{/each}}
        },
        additionalProperties: {{{json additionalProperties}}},
        {{/if}}
        {{#if type}}
        dataType: 'refAlias',
        type: {{{json type}}},
        {{/if}}
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    {{/each}}
};
const validationService = new ValidationService(models);

// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

export function RegisterRoutes<T extends Hono>(router: T) {
    // ###########################################################################################################
    //  NOTE: If you do not see routes for all of your controllers in this file, then you might not have informed tsoa of where to look
    //      Please look into the "controllerPathGlobs" config option described in the readme: https://github.com/lukeautry/tsoa
    // ###########################################################################################################
                 
    return router{{#each controllers}}{{#each actions}}
        .get('/docs', async (ctx: Context, next: Next) => {
          return ctx.html(swaggerUI);
        })
        .get('/docs/spec', async (ctx: Context, next: Next) => {
          return ctx.json(swaggerSpec);
        })
        .{{method}}('{{fullPath}}', async (ctx: Context, next: Next) => {
            const args = {
                {{#each parameters}}
                    {{@key}}: {{{json this}}},
                {{/each}}
            };

            {{#if ../../iocModule}}
            const container: IocContainer = typeof iocContainer === 'function' ? (iocContainer as IocContainerFactory)(ctx.req) : iocContainer;

            const controller: any = container.get<{{../name}}>({{../name}});
            if (typeof controller['setStatus'] === 'function') {
                controller.setStatus(undefined);
            }
            {{else}}
            const controller = new {{../name}}();
            {{/if}}

            const handlers = [
              {{#if security.length}}
                authenticationHandler({{json security}}),
              {{/if}}
              ...(fetchMiddlewares<Context>({{../name}})),
              ...(fetchMiddlewares<Context>({{../name}}.prototype.{{name}})),
              async () => {
                let validatedArgs: any;

                try {
                  validatedArgs = await getValidatedArgs(args, ctx);
                } catch (err: any) {
                  if (err instanceof ValidateError) {
                    return ctx.json({ fields: err.fields }, err.status || 400);
                  }

                  return ctx.json({
                    message: err.message,
                    cause: err.cause,
                  });
                }
                const result = await controller.{{name}}.apply(controller, validatedArgs)
                return returnHandler(ctx, controller, result);
              },
            ];

            return runHandlers(ctx, handlers);
        }){{/each}}{{/each}}
}
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

async function runHandlers(ctx: Context, handlers: any) {
  const [handler, ...next] = handlers;

  return handler(ctx, next.length ? () => runHandlers(ctx, next) : undefined);
}

function identifyObject(obj: any) {
  if (obj === null) {
    return 'null';
  } else if (obj === undefined) {
    return 'undefined';
  } else if (typeof obj === 'string') {
    return 'String';
  } else if (typeof obj === 'boolean') {
    return "Boolean";
  } else if (typeof obj === 'number') {
    return 'Number';
  } else if (obj instanceof ArrayBuffer) {
    return 'ArrayBuffer';
  } else if (obj instanceof Buffer) {
    return 'Buffer';
  } else if (typeof obj === 'object') {
    return 'Object';
  } else {
    throw new Error('Unknown type');
  }
}

function returnHandler(
  ctx: Context,
  controller: Controller,
  data?: string | object | number | boolean,
) {
  switch (identifyObject(data)) {
    case 'Number':
    case 'Boolean':
    case 'String':
      if (!data) return;
      return ctx.text(
        data.toString() as string,
        // The default status in required for hono to set the headers
        controller.getStatus() || 200,
        controller.getHeaders() as Record<string, string>,
      );    
    case 'ArrayBuffer':    
    case 'Buffer':    
      // Doesn't seem to be a built in way to handle buffers in hono
      return new Response(data as Buffer, {
        status: controller.getStatus(),
        headers: controller.getHeaders() as Record<string, string>,
      });
    case 'Object':
      // The default status in required for hono to set the headers
      return ctx.json(
        data as unknown,
        controller.getStatus() || 200,
        controller.getHeaders() as Record<string, string>,
      );  }
}

async function getBody(ctx: Context) {
  const contentType = ctx.req.header('content-type')?.toLowerCase() || '';

  if (contentType.startsWith('application/json')) {
    return ctx.req.json();
  }

  if (contentType.startsWith('application/x-www-form-urlencoded') || contentType.startsWith('multipart/form-data')) {
    return ctx.req.parseBody();
  }

  return ctx.req.text();
}

async function getValidatedArgs(
    args: any,
    ctx: any,    
  ) {
    const errorFields: FieldErrors = {};
    const parsedBody = await getBody(ctx);
    const values = await Promise.all(Object.keys(args).map(async (key) => {
      const name = args[key].name;
      switch (args[key].in) {
        case 'request':
          return {
            ...ctx.request,
            ctx,
          };
        case 'query':
          return validationService.ValidateParam(
            args[key],
            ctx.req.query(name),
            name,
            errorFields,
            undefined,
            { noImplicitAdditionalProperties: 'throw-on-extras' }
          );
        case 'path':
          return validationService.ValidateParam(
            args[key],
            ctx.req.param(name),
            name,
            errorFields,
            undefined,
            { noImplicitAdditionalProperties: 'throw-on-extras' }
          );
        case 'header':
          return validationService.ValidateParam(
            args[key],
            ctx.req.headers.get(name) ?? undefined,
            name,
            errorFields,
            undefined,
            { noImplicitAdditionalProperties: 'throw-on-extras' }
          );
        case 'body':
          return validationService.ValidateParam(
            args[key],
            parsedBody,
            name,
            errorFields,
            undefined,
            { noImplicitAdditionalProperties: 'throw-on-extras' }
          );
        case 'body-prop':
          return validationService.ValidateParam(
            args[key],
            parsedBody[name],
            name,
            errorFields,
            'body.',
            { noImplicitAdditionalProperties: 'throw-on-extras' }
          );
        case 'formData':
          if (args[key].dataType === 'file') {
            return validationService.ValidateParam(
              args[key],
              parsedBody[name],
              name,
              errorFields,
              undefined,
              { noImplicitAdditionalProperties: 'throw-on-extras' }
            );
          } else if (
            args[key].dataType === 'array' &&
            args[key].array.dataType === 'file'
          ) {
            return validationService.ValidateParam(
              args[key],
              parsedBody.files,
              name,
              errorFields,
              undefined,
              { noImplicitAdditionalProperties: 'throw-on-extras' }
            );
          } else {
            return validationService.ValidateParam(
              args[key],
              parsedBody[name],
              name,
              errorFields,
              undefined,
              { noImplicitAdditionalProperties: 'throw-on-extras' }
            );
          }
        {{!-- case 'res':
          return responder(ctx, next); --}}
      }
    }));
    if (Object.keys(errorFields).length > 0) {
      throw new ValidateError(errorFields, '');
    }
    return values;
  }